#!/usr/bin/env python3

import rospy
import cv2 as cv
import numpy as np
import sys

from sensor_msgs.msg import Image, CompressedImage
from cv_bridge import CvBridge, CvBridgeError

flag_process = False
prev_cv_image = None

class image_converter:
    def __init__(self):
        # initialize ros publisher, ros subscriber
        self.publisher = rospy.Publisher("optical_flow_output", Image, queue_size=10)

        self.bridge = CvBridge()

        self.subscriber = rospy.Subscriber("/stereo_ueye_cam_1/left/image_raw/compressed", CompressedImage, self.callback, queue_size=1)


    def callback(self, ros_img_msg):
        global flag_process
        global prev_cv_image
        #try:
            #cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
        #except CvBridgeError as e:
        #    print(e)

        np_arr = np.fromstring(ros_img_msg.data, np.uint8)
        cv_image = cv.imdecode(np_arr, cv.IMREAD_COLOR)
        #cv_image = cv.imdecode(np_arr, cv.CV_LOAD_IMAGE_COLOR)
        if not flag_process:
            flag_process = True
            prev_cv_image = cv_image.copy()
            return False

        prev_gray = cv.cvtColor(prev_cv_image, cv.COLOR_BGR2GRAY)

        mask = np.zeros_like(prev_cv_image)

        mask[..., 1]= 255

        # no need for while loop
        # while(cv_image.isOpened()):
        # cv_image2 = self.bridge.imgmsg_to_cv2(data, "bgr8")
        
        gray = cv.cvtColor(cv_image, cv.COLOR_BGR2GRAY)

        flow = cv.calcOpticalFlowFarneback(prev_gray, gray, None, 0.5, 3, 5, 3, 3, 1.2, 0)

        magnitude, angle = cv.cartToPolar(flow[...,0], flow[...,1])

        mask[..., 0] =  angle * 180/ np.pi/ 2

        #magnitude[magnitude[:] < 0.1] = 0.
        mask[..., 2] = cv.normalize(magnitude, None, 0, 255, cv.NORM_MINMAX)

        rgb = cv.cvtColor(mask, cv.COLOR_HSV2RGB)

        prev_cv_image = cv_image.copy()

        cv.imshow("Image window", rgb)
        cv.waitKey(3)
        
        rospy.loginfo("Publishing")
        
        try:
            self.publisher.publish(self.bridge.cv2_to_imgmsg(rgb, "bgr8"))
        
        except CvBridgeError as e:
            print(e)

        return True
    
def main(args):
    ic = image_converter()
    rospy.init_node("image_converter", anonymous=True)
    try:
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting down")
    cv.destroyAllWindows()

if __name__ == "__main__":
    main(sys.argv)
