#!/usr/bin/env python3

import rospy
import cv2 as cv
import numpy as np
import sys
import pandas as pd
from matplotlib import pyplot as plt 
from sklearn import preprocessing

from sensor_msgs.msg import Image, CompressedImage
from cv_bridge import CvBridge, CvBridgeError

flag_process = False
prev_cv_image = None
count = 0
df = pd.DataFrame({'X Velocities': [],
                'Y Velocities':[]})




class image_converter:

    def __init__(self):
        # initialize ros publisher, ros subscriber
        
        self.publisher = rospy.Publisher("optical_flow_output", Image, queue_size=10)

        self.bridge = CvBridge()

        self.subscriber = rospy.Subscriber("/stereo_ueye_cam_1/left/image_raw/compressed", CompressedImage, self.callback, queue_size=1)


    def callback(self, ros_img_msg):
        global flag_process
        global prev_cv_image
        global count
        global df


        np_arr = np.frombuffer(ros_img_msg.data, np.uint8)
        cv_image = cv.imdecode(np_arr, cv.IMREAD_COLOR)
        
        if not flag_process:
            flag_process = True
            prev_cv_image = cv_image.copy()
            return False
        
        # resizing
        prev_cv_image = cv.resize(prev_cv_image, (480, 434))
        roi1 = prev_cv_image[100:434,70:480]
        # actual size of image -> 1080, 1440


        prev_gray = cv.cvtColor(roi1, cv.COLOR_BGR2GRAY)

        mask = np.zeros_like(roi1)

        mask[..., 1]= 255

        # resizing again
        second_frame = cv.resize(cv_image, (480, 434))
        roi2 = second_frame[100:434,70:480]
        gray = cv.cvtColor(roi2, cv.COLOR_BGR2GRAY)

        flow = cv.calcOpticalFlowFarneback(prev_gray, gray, None, 0.5, 3, 15, 3, 5, 1.2, 0)
        # 0.5, 3, 15, 3, 5, 1.2, 0
        # 0.5, 3, 5, 3, 3, 1.2, 0

        rgb, df2  = arrows_opt_flow(gray, flow, count)

        prev_cv_image = cv_image.copy()

        #cv.imshow("Image window", rgb)
        #cv.waitKey(3)
        
        # message displayed in terminal
        # rospy.loginfo(second_frame.shape)
        # rospy.loginfo("Publishing")

            
        # increase count for number of frames
        if count != 10:
            count += 1
        else:
            df = pd.concat([df, df2], ignore_index=True)
            #print(df)
            count = 0

        df.to_csv("/home/vsanchez/catkin_ws/src/bag_files/scripts/test.csv")
        # if cv.waitKey(1) & 0xFF == ord('q'):
        #     break


        try:
            self.publisher.publish(self.bridge.cv2_to_imgmsg(rgb, "bgr8"))
        
        except CvBridgeError as e:
            print(e)

        return True

################  FUNCTION ################
def vel_hist(input, label):
    hist_np, bins = np.histogram(input.ravel(), bins=30, range=[-10,40])
    plt.hist(input.ravel(), bins=30, range=[-10,40]) 

    plt.xlabel('Velocity') 
    plt.ylabel('Number of Pixels')

    plt.title(label)

    #plt.show()

    return hist_np , bins

def arrows_opt_flow(img, flow, count, step=16):
    h, w = img.shape[:2]  # exctract rows and columns
    y, x = np.mgrid[step/2:h:step, step/2:w:step].reshape(2,-1).astype(int)  # gets the coordinates from the grid
    fx, fy = flow[y,x].T  # vel 

    #rospy.loginfo(np.amax(fy))
    #rospy.loginfo(np.amin(fy))


    lines = np.vstack([x, y, x+fx, y+fy]).T.reshape(-1, 2, 2)  
    lines = np.int32(lines)

    img_bgr = cv.cvtColor(img, cv.COLOR_GRAY2BGR)
    # empty data frame
    #df2 = pd.DataFrame(columns=['No. Pixels','X Velocities','Y Velocities'])
    df2 = pd.DataFrame({'X Velocities': [],
                            'Y Velocities':[]})

    for (x1, y1), (_x2, _y2) in lines:
        cv.circle(img_bgr, (x1, y1), 1, (0, 0, 255), -1)
        cv.arrowedLine(img_bgr,(x1, y1), (_x2,_y2),(0,255,0), 1, tipLength=0.5)
        # image, start point, end point, color, thickness
        # tip length: the length of the arrow tip in relation to the arrow lenght
    

    if count == 10:
        
        # plot velocities of x and y
        hist_x, bins = vel_hist(fx*5, 'X Velocities')
        hist_y, bins = vel_hist(fy*5, 'Y Velocities')

        rospy.loginfo(np.amax(fy))
        rospy.loginfo(np.amin(fy))

        # dictionary, each key represents the column of the data frame
        df2 = pd.DataFrame({'X Velocities': [hist_x], 
                            'Y Velocities':[hist_y]})
      
    #cv.waitKey()

    return img_bgr,df2   

def main(args):

    ic = image_converter()
    rospy.init_node("image_converter", anonymous=True)
    try:
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting down")
    cv.destroyAllWindows()

if __name__ == "__main__":
    main(sys.argv)
